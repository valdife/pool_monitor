#!/usr/bin/env python3
"""
Skrypt testowy do sprawdzenia parsowania danych z endpointu basenu
"""

import json
import re

# Przyk≈Çadowa odpowied≈∫ z endpointu
sample_response = [
    {
        "title": "P≈Çywalnia Sportowa",
        "content": "Aktualnie na p≈Çywalni: 116 os√≥b<br />Maksymalnie: 120 os√≥b",
        "type": "p≈Çywalnia sportowa",
        "id": 1,
        "isActive": True,
        "createdAt": "2022-04-29T01:27:21+02:00",
        "updateAt": "2022-04-29T01:27:21+02:00",
        "active": True
    },
    {
        "title": "P≈Çywalnia Rodzinna",
        "content": "Aktualnie na p≈Çywalni: 0 os√≥b<br />Maksymalnie: 150 os√≥b",
        "type": "p≈Çywalnia rodzinna",
        "id": 2,
        "isActive": True,
        "createdAt": "2022-05-05T23:25:56+02:00",
        "updateAt": "2022-05-05T23:25:56+02:00",
        "active": True
    },
    {
        "title": "P≈Çywalnia Kameralna",
        "content": "Aktualnie na p≈Çywalni: 26 os√≥b<br />Maksymalnie: 30 os√≥b",
        "type": "p≈Çywalnia kameralna",
        "id": 4,
        "isActive": True,
        "createdAt": "2022-07-31T11:01:56+02:00",
        "updateAt": "2022-07-31T11:01:56+02:00",
        "active": True
    },
    {
        "title": "Lodowisko",
        "content": "Aktualnie na ≈õlizgawce: 0 os√≥b<br />Maksymalnie: 300 os√≥b",
        "type": "lodowisko",
        "id": 5,
        "isActive": True,
        "createdAt": "2022-08-08T09:46:01+02:00",
        "updateAt": "2022-08-08T09:46:01+02:00",
        "active": True
    }
]

def test_parsing():
    """Testuje parsowanie danych z endpointu"""
    print("üß™ Test parsowania danych z endpointu basenu")
    print("=" * 50)

    # Szukamy "P≈Çywalnia Sportowa" w tablicy
    for facility in sample_response:
        if facility.get('title') == 'P≈Çywalnia Sportowa':
            content = facility.get('content', '')
            print(f"‚úÖ Znaleziono: {facility['title']}")
            print(f"üìù Content: {content}")

            # Parsujemy liczbƒô os√≥b z content
            match = re.search(r'Aktualnie na p≈Çywalni: (\d+) os√≥b', content)
            if match:
                people_count = int(match.group(1))
                print(f"üë• Liczba os√≥b: {people_count}")
                return people_count
            else:
                print(f"‚ùå Nie mo≈ºna sparsowaƒá liczby os√≥b z content: {content}")
                return None

    print("‚ùå Nie znaleziono 'P≈Çywalnia Sportowa' w odpowiedzi")
    return None

def test_different_scenarios():
    """Testuje r√≥≈ºne scenariusze"""
    print("\nüîÑ Test r√≥≈ºnych scenariuszy")
    print("=" * 30)

    scenarios = [
        "Aktualnie na p≈Çywalni: 0 os√≥b<br />Maksymalnie: 120 os√≥b",
        "Aktualnie na p≈Çywalni: 50 os√≥b<br />Maksymalnie: 120 os√≥b",
        "Aktualnie na p≈Çywalni: 120 os√≥b<br />Maksymalnie: 120 os√≥b",
        "Aktualnie na p≈Çywalni: 99 os√≥b<br />Maksymalnie: 120 os√≥b"
    ]

    for i, content in enumerate(scenarios, 1):
        match = re.search(r'Aktualnie na p≈Çywalni: (\d+) os√≥b', content)
        if match:
            people_count = int(match.group(1))
            print(f"Scenariusz {i}: {people_count} os√≥b")
        else:
            print(f"Scenariusz {i}: B≈ÇƒÖd parsowania")

if __name__ == "__main__":
    result = test_parsing()
    test_different_scenarios()

    if result is not None:
        print(f"\n‚úÖ Test zako≈Ñczony sukcesem! Liczba os√≥b: {result}")
    else:
        print(f"\n‚ùå Test nie powi√≥d≈Ç siƒô")
